{"version":3,"file":"static/js/504.8a386c7a.chunk.js","mappings":"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","sources":["components/home/home.tsx"],"sourcesContent":["import { Box, Button, Card, Checkbox, Chip, FormControl, FormLabel, ListItemText, MenuItem, OutlinedInput, Select, TextField, Typography } from \"@mui/material\";\r\nimport Table from '@mui/material/Table';\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { useState } from \"react\";\r\nimport { useGetMoviesQuery, useGetMoviesGenresQuery, useGetMovieByTitleQuery } from './../../store/movies-api'\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n\r\ntype Inputs = {\r\n    title: string\r\n    genres: string\r\n}\r\n\r\ninterface Column {\r\n    id: 'poster_path' | 'original_title' | 'genre_ids' | 'overview' | 'release_date' | 'vote_average' | 'vote_count';\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right';\r\n    format?: (value: number) => string;\r\n}\r\n\r\nconst columns: readonly Column[] = [\r\n    { id: 'poster_path', label: 'Poster', minWidth: 170 },\r\n    { id: 'original_title', label: 'Title', minWidth: 100 },\r\n    { id: 'genre_ids', label: 'Genres', minWidth: 100 },\r\n    {\r\n      id: 'overview',\r\n      label: 'Description',\r\n      minWidth: 200\r\n    },\r\n    {\r\n      id: 'release_date',\r\n      label: 'Release Date',\r\n      minWidth: 100\r\n    },\r\n    {\r\n      id: 'vote_average',\r\n      label: 'Average vote',\r\n      minWidth: 100,\r\n      format: (value: number) => value.toFixed(2),\r\n    },\r\n    {\r\n      id: 'vote_count',\r\n      label: 'Vote count',\r\n      minWidth: 100,\r\n      format: (value: number) => value.toFixed(2),\r\n    }\r\n];\r\n\r\nconst Home = () => {\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [pageServer, setPageServer] = useState(1);\r\n    const [genres, setGenres] = useState(' ')\r\n    const { data, error, isLoading } = useGetMoviesQuery({page: pageServer, genres: genres});\r\n    const { data: dataGenres } = useGetMoviesGenresQuery();      \r\n    const {register, control, getValues} = useForm<Inputs>();\r\n    // Dummy call to avoid error\r\n    const [initialRTKQuery, setRTKQuery] = useState('Matrix');\r\n    const { data: dataQuery } = useGetMovieByTitleQuery({query: initialRTKQuery, page: pageServer});\r\n    const [totalQuery, setTotalQuery] = useState(true);\r\n\r\n    // Select component for genres\r\n    const ITEM_HEIGHT = 48;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n            },\r\n        },\r\n    };\r\n    const [genreName, setGenreName] = useState<any[]>([]);\r\n\r\n    const handleChange = (event: any) => {\r\n        setGenreName(event.target.value);\r\n    };\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const increase = () => {\r\n        setPageServer(pageServer + 1);\r\n        setPage(0);\r\n    }\r\n\r\n    const decrease = () => {\r\n        if (pageServer >= 2){\r\n            setPageServer(pageServer - 1)\r\n        }\r\n        setPage(0);\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const sendSearchForm = () => {\r\n        let formValues = getValues([\"title\",\"genres\"]);\r\n        if (formValues[0]){\r\n            setTotalQuery(false);\r\n            setRTKQuery(formValues[0]);\r\n            setPageServer(1);\r\n        } else if (typeof formValues[1] === 'object' && (formValues[1] as Array<number>).length > 0) {\r\n            let genres = '';\r\n            (formValues[1] as Array<number>).forEach((genre) => {\r\n                genres = genres + genre + '%2C'\r\n            })\r\n            setGenres(genres);\r\n            setTotalQuery(true);\r\n            setPageServer(1);\r\n        } else {\r\n            setGenres('');\r\n            setTotalQuery(true);\r\n            setPageServer(1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n          <div>\r\n            <form>\r\n                <Card variant=\"outlined\">\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h4\"\r\n                        sx={{ width: '100%', fontSize: 'clamp(2rem, 10vw, 2.15rem)' }}\r\n                    >\r\n                        Search movies\r\n                    </Typography>\r\n                    <Typography\r\n                        component=\"h5\"\r\n                        variant=\"h5\"\r\n                        sx={{ width: '100%'}}\r\n                    >\r\n                        Choose one filter and search the movies\r\n                    </Typography>\r\n                    <Box\r\n                        component=\"form\"\r\n                        sx={{ display: 'flex', flexDirection: 'row', gap: 2 }}\r\n                    >\r\n                        {/* Title */}\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <FormLabel htmlFor=\"movie_title\">Title</FormLabel>\r\n                                <TextField\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"movie_title\"\r\n                                {...register(\"title\")}\r\n                                variant=\"outlined\"\r\n                                autoFocus\r\n                                />\r\n                        </FormControl>\r\n\r\n                        {/* Genres */}\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <FormLabel htmlFor=\"genres_movie\">Genres</FormLabel>\r\n                            <Controller\r\n                            name=\"genres\"\r\n                            control={control}\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                {...field}\r\n                                {...register(\"genres\")}\r\n                                multiple\r\n                                labelId=\"multiple-checkbox-genres-label\"\r\n                                id=\"genres_movie\"\r\n                                value={genreName}\r\n                                onChange={handleChange}\r\n                                input={<OutlinedInput label=\"Tag\" />}\r\n                                renderValue={(selected) => (\r\n                                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                        {selected.map((genreId: number) => (\r\n                                        <Chip key={genreId} label={dataGenres?.genres.find((o: any) => o.id === genreId)!.name} />\r\n                                        ))}\r\n                                    </Box>\r\n                                )}\r\n                                MenuProps={MenuProps}\r\n                                >\r\n                                    {dataGenres?.genres.map((genre: any) => (\r\n                                        <MenuItem key={genre.id} value={genre.id}>\r\n                                            <Checkbox checked={genreName.includes(genre.id)} />\r\n                                            <ListItemText primary={genre.name} />\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            )}\r\n                            />\r\n                            \r\n                        </FormControl>\r\n                        <Button sx={{ m: 4, width: 300, height: 55 }} variant=\"contained\" onClick={sendSearchForm}>Search</Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n          </div>\r\n          {error && <div>An error ocurred when retrieving the movies. Please retry again.</div>}\r\n          {isLoading && <div>Loading...</div>}\r\n          {!isLoading && <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n            <TableContainer sx={{ maxHeight: 'auto' }}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                    {columns.map((column) => (\r\n                        <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                        >\r\n                        {column.label}\r\n                        </TableCell>\r\n                    ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {(totalQuery ?  data : dataQuery)?.results\r\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row: any) => {\r\n                        return (\r\n                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\r\n                            {columns.map((column) => {\r\n                            let value = row[column.id];\r\n                            if (typeof value === 'object' && value?.length && value.length > 0){\r\n                                let genresMovie = '';\r\n                                value?.forEach((element: any) => {\r\n                                    dataGenres?.genres.forEach((genre: any) => {\r\n                                        if (genre.id === element){\r\n                                            genresMovie = genresMovie + genre.name + ', ';\r\n                                        }\r\n                                    })\r\n                                });\r\n                                value = genresMovie\r\n                            }\r\n                            if (column.id === 'release_date'){\r\n                                value = value.split(\"-\").reverse().join(\"/\");\r\n                            }\r\n                            return (\r\n                                <TableCell key={column.id} align={column.align}>\r\n                                {column.format && typeof value === 'number'\r\n                                    ? column.format(value)\r\n                                    : null}\r\n                                {typeof value === 'string' && value.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? <img src={`https://image.tmdb.org/t/p/w500${row.poster_path}`} width={200} height={150} alt=\"\" /> : value}\r\n                                </TableCell>\r\n                            );\r\n                            })}\r\n                        </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={(totalQuery ?  data : dataQuery)?.results.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n            <Box\r\n                sx={{ display: 'flex', flexDirection: 'row', gap: 2 , justifyContent: 'right'}}\r\n            >\r\n                <Button variant=\"contained\" onClick={increase}>See next page</Button>\r\n                <Button variant=\"contained\" onClick={decrease}>See previous page</Button>\r\n            </Box>\r\n            </Paper>}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Home;"],"names":["columns","id","label","minWidth","format","value","toFixed","Home","_ref2","_ref3","page","setPage","useState","rowsPerPage","setRowsPerPage","pageServer","setPageServer","genres","setGenres","data","error","isLoading","useGetMoviesQuery","dataGenres","useGetMoviesGenresQuery","register","control","getValues","useForm","initialRTKQuery","setRTKQuery","dataQuery","useGetMovieByTitleQuery","query","totalQuery","setTotalQuery","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","genreName","setGenreName","handleChange","event","target","_jsxs","_Fragment","children","_jsx","Card","variant","Typography","component","sx","fontSize","Box","display","flexDirection","gap","FormControl","m","FormLabel","htmlFor","TextField","type","className","autoFocus","Controller","name","render","_ref","field","Select","multiple","labelId","onChange","input","OutlinedInput","renderValue","selected","flexWrap","map","genreId","Chip","find","o","genre","MenuItem","Checkbox","checked","includes","ListItemText","primary","Button","height","onClick","sendSearchForm","formValues","length","forEach","Paper","overflow","TableContainer","Table","stickyHeader","TableHead","TableRow","column","TableCell","align","TableBody","results","slice","row","hover","role","tabIndex","_value","_value2","genresMovie","element","split","reverse","join","match","src","poster_path","alt","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","justifyContent","increase","decrease"],"sourceRoot":""}